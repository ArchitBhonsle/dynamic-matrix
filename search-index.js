var searchIndex = JSON.parse('{\
"dynamic_matrix":{"doc":"A crate to work with dynamically sized matrices.","t":[3,11,11,11,11,11,11,11,11,11,11,14,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["DynamicMatrix","as_mut_ptr","as_mut_slice","as_ptr","as_slice","borrow","borrow_mut","capacity","clone","clone_into","cols","dynamic_matrix","errors","fmt","from","from_boxed_slice","from_raw_parts","get","get_mut","index","index_mut","into","into_boxed_slice","len","new","new_with_cols","push_col","push_row","rows","shape","to_owned","try_from","try_into","type_id","with_capacity","indexing_error","shape_error","IndexingError","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","into","new","to_owned","to_string","try_from","try_into","type_id","ShapeError","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","into","new","new_cols_error","new_rows_error","to_owned","to_string","try_from","try_into","type_id"],"q":["dynamic_matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dynamic_matrix::errors","","dynamic_matrix::errors::indexing_error","","","","","","","","","","","","","","","dynamic_matrix::errors::shape_error","","","","","","","","","","","","","","","",""],"d":["A dynamic matrix in stored in row-major order.","Gives a raw mutable pointer to the underlying Vec’s …","Extracts a mut slice containing the underlying Vec","Gives a raw pointer to the underlying Vec’s buffer","Extracts a slice containing the underlying Vec","","","Returns the capacity of the underlying Vec","","","Returns the number of columns in the DynamicMatrix","A macro to construct a DynamicMatrix","Contains the errors associated with this crate","","","Creates a DynamicMatrix from a Boxed slice","Creates a DynamicMatrix from it’s underlying raw …","Returns a <code>Result</code> containing a shared reference to the …","Returns a <code>Result</code> containing an exclusive reference to the …","Returns a shared reference to the value at the given index","Returns an exclusive reference to the value at the given …","","Decomposes the DynamicMatrix into the boxed slice of it’…","Returns the length of the underlying Vec","Constructs a new DynamicMatrix from a nested array","Constructs a new empty DynamicMatrix with a set number of …","Appends a new columns to the DynamicMatrix","Appends a new row to the DynamicMatrix","Returns the number of rows in the DynamicMatrix","Returns a tuple containing the number of rows as the first …","","","","","Constructs a new DynamicMatrix and allocates enough space …","Error encountered while indexing into a matrix","Error encountered due to incompatible shapes","The error type of indexing out of bounds","","","","","","","","","Create a new <code>IndexingError</code> given the index as a row, …","","","","","","The error type for any shape errors","","","","","","","","","Create a new <code>ShapeError</code> given the shape of the matrix and …","Create a new <code>ShapeError</code> given the columns of the matrix …","Create a new <code>ShapeError</code> given the rows of the matrix and …","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["dynamicmatrix",3]],[[]],[[],["usize",15]],null,null,[[["formatter",3]],["result",6]],[[]],[[["box",3],["usize",15]]],[[["usize",15]]],[[],[["indexingerror",3],["result",4,["indexingerror"]]]],[[],[["indexingerror",3],["result",4,["indexingerror"]]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["vec",3]],[["result",4,["shapeerror"]],["shapeerror",3]]],[[["vec",3]],[["result",4,["shapeerror"]],["shapeerror",3]]],[[],["usize",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[]],[[],["indexingerror",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["indexingerror",3]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["shapeerror",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["shapeerror",3]],[[["usize",15]],["shapeerror",3]],[[["usize",15]],["shapeerror",3]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"DynamicMatrix"],[3,"IndexingError"],[3,"ShapeError"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};